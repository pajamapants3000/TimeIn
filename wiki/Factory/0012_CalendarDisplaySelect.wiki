%title Calendar Display Select (Task 0012) | Tasks | TimeIn

    = Contents =
    - [[#User Story|User Story]]
    - [[#Solution Proposal|Solution Proposal]]
    - [[#Solution Breakdown|Solution Breakdown]]
        - [[#Solution Breakdown#Backend|Backend]]
        - [[#Solution Breakdown#Frontend|Frontend]]
            - [[#Solution Breakdown#Frontend#End-to-End Tests|End-to-End Tests]]
                - [[#Solution Breakdown#Frontend#End-to-End Tests#Updates|Updates]]
                - [[#Solution Breakdown#Frontend#End-to-End Tests#New|New]]
                - [[#Solution Breakdown#Frontend#End-to-End Tests#PageObject|PageObject]]
            - [[#Solution Breakdown#Frontend#ScheduledEventsComponent|ScheduledEventsComponent]]
                - [[#Solution Breakdown#Frontend#ScheduledEventsComponent#Tests|Tests]]
                    - [[#Solution Breakdown#Frontend#ScheduledEventsComponent#Tests#Updates|Updates]]
                    - [[#Solution Breakdown#Frontend#ScheduledEventsComponent#Tests#New|New]]
            - [[#Solution Breakdown#Frontend#ScheduledEventDisplayModule|ScheduledEventDisplayModule]]
                - [[#Solution Breakdown#Frontend#ScheduledEventDisplayModule#Practice Site|Practice Site]]
                - [[#Solution Breakdown#Frontend#ScheduledEventDisplayModule#DisplayKind|DisplayKind]]
                - [[#Solution Breakdown#Frontend#ScheduledEventDisplayModule#IntracomService|IntracomService]]
                    - [[#Solution Breakdown#Frontend#ScheduledEventDisplayModule#IntracomService#Tests|Tests]]
                - [[#Solution Breakdown#Frontend#ScheduledEventDisplayModule#DisplayService|DisplayService]]
                    - [[#Solution Breakdown#Frontend#ScheduledEventDisplayModule#DisplayService#Tests|Tests]]
                - [[#Solution Breakdown#Frontend#ScheduledEventDisplayModule#ScheduledEventDisplayComponent|ScheduledEventDisplayComponent]]
                    - [[#Solution Breakdown#Frontend#ScheduledEventDisplayModule#ScheduledEventDisplayComponent#Tests|Tests]]
                - [[#Solution Breakdown#Frontend#ScheduledEventDisplayModule#ListComponent|ListComponent]]
                    - [[#Solution Breakdown#Frontend#ScheduledEventDisplayModule#ListComponent#Tests|Tests]]
                        - [[#Solution Breakdown#Frontend#ScheduledEventDisplayModule#ListComponent#Tests#Updates|Updates]]
                        - [[#Solution Breakdown#Frontend#ScheduledEventDisplayModule#ListComponent#Tests#New|New]]
                - [[#Solution Breakdown#Frontend#ScheduledEventDisplayModule#MonthlyCalendarComponent|MonthlyCalendarComponent]]
                    - [[#Solution Breakdown#Frontend#ScheduledEventDisplayModule#MonthlyCalendarComponent#Tests|Tests]]
        - [[#Solution Breakdown#Integration|Integration]]
        - [[#Solution Breakdown#Coat of Paint|Coat of Paint]]
    - [[#Additional Tasks|Additional Tasks]]
    - [[#To-Do|To-Do]]
    - [[#Progress|Progress]]
    - [[#Next|Next]]

= User Story =
Make it possible for the user to switch between available displays for the list
of scheduled events.
= Solution Proposal =
* use Material's Button toggle as the user interface element
= Solution Breakdown =
* add button toggle
    * I think it should go on the same row as the "Add new event" button
    * left or right?
        * I think the button toggle should be to the right of the add button
* current options for button toggle should be "List" and "Monthly"
    * this is, of course, only a starting point, until we have the actual
        displays implemented
    * for now, "List" will show the current display, whereas "Monthly"
        will show a blank page (or perhaps just some simple text, like "I am
        a calendar"
== Backend ==
N/A
== Frontend ==
* [ ] Need to move "Add new event" button from ListScheduledEventsComponent to
    ScheduledEventsComponent
    * probably should have been here in the first place
    * Task 13
* [ ] move ListScheduledEventsComponent to ScheduledEventsDisplayModule\
    ListComponent
    * Task 14
* [ ] Place button toggle in same row as add button, to the right
* [ ] Ensure button toggles between showing ListComponent and
    MonthlyCalendarComponent in the ScheduledEventsDisplayModule
=== End-to-End Tests ===
==== Updates ====
* changes should be made to existing TimeIn spec:
* [ ] All current scheduled events tests should click "List" just after opening
    scheduled events tab
==== New ====
* [ ] should render message "MonthlyCalendarComponent works!" when "Monthly"
      button toggle clicked
    * [ ] written
    * [ ] passing
==== PageObject ====
* [ ] add properties for each toggle button element
* [ ] update element references for ListScheduledEventsComponent to ListComponent
=== ScheduledEventsComponent ===
==== Tests ====
===== Updates =====
* [ ] should render ListScheduledEvents component
    * should render ScheduledEventDisplay component
    * [ ] written
    * [ ] passing
* [ ] should set ScheduledEventDetails detailsId input to null when
    ListScheduledEvents raises `openDetailsEvent` event with no id
    * should set ScheduledEventDetails detailsId input to null when add button
      clicked
    * [ ] written
    * [ ] passing
* [ ] should set ScheduledEventDetails detailsId input to correct id when
    ListScheduledEvents raises `openDetailsEvent` event'
    * should set ScheduledEventDetails detailsId input to correct id when
        ScheduledEventDisplay emits idSelected event
    * [ ] written
    * [ ] passing
* [ ] should toggle ListScheduledEvents `updateSwitch` input when
    `closeDetailsEvent` is true'
    * should call refreshDisplay on ScheduledEventDisplayComponent when
        closeDetailsEvent is true
    * [ ] written
    * [ ] passing
* [ ] should not toggle ListScheduledEvents `updateSwitch` input when
    `closeDetailsEvent` is false
    * should not call refreshDisplay on ScheduledEventDisplayComponent when
        closeDetailsEvent is false
    * [ ] written
    * [ ] passing
===== New =====
* [ ] should render 'Add new event' button
    * [ ] written
    * [ ] passing
* [ ] should render button toggle with options in DisplayKind enum
    * [ ] written
    * [ ] passing
* [ ] should set display input property to DisplayKind.List when "List" clicked
    * [ ] written
    * [ ] passing
* [ ] should set display input property to DisplayKind.Monthly when "Monthly" clicked
    * [ ] written
    * [ ] passing
* [ ] should call loadScheduledEvents on ScheduledEventDisplay view child in ngOnInit
    * [ ] written
    * [ ] passing
* [ ] should call loadScheduledEvents on ScheduledEventDisplay view child in
      onCloseDetails if argument is true
    * [ ] written
    * [ ] passing
=== ScheduledEventDisplayModule ===
I think the best way to accomplish this is via a practice site...
==== Practice Site ====
* Needs:
    * Module
    * Parent component
    * Two display components
        * ~~each implements the interface for i/o~~
        * has label that displays input variable
        * has button that sets output variable
    * ~~Interface~~
    * Communication service
    * Display service - returns display component for given index/enum
==== DisplayKind ====
* const enum to contain display options
* currently:
    * List
    * Monthly
==== IntracomService ====
* passes messages between DisplayComponent and specific displays (list, monthly)
* idSelected - lets display component know when an event is selected in the
    displayed list/calendar
    * subject: `idSelectedSource`
        * `Subject<number>`
    * update via `onIdSelected` method
    * subscribe via `idSelected$`
        * set to `this.idSelectedSource.asObservable()`
* scheduledEvents - lets displayed list/calendar know when new information
    is ready to be displayed and provides that information
    * subject: `scheduledEventSource`
        * `Subject<ScheduledEvent[]>`
    * update via `onScheduledEventsUpdated` method
    * subscribe via `scheduledEvent$`
        * set to `this.scheduledEventSource.asObservable()`
===== Tests =====
* [ ] subscriber gets id when onIdSelected called
* [ ] subscriber gets array of scheduled events when updateScheduledEvents called
==== DisplayService ====
* returns appropriate display kind component when called with a DisplayKind
    enum value
    * single method: `getDisplayComponent(kind: DisplayKind): any`
===== Tests =====
* [ ] should return ListComponent when `getDisplayComponent` called with
    DisplayKind.List
* [ ] should return MonthlyCalendarComponent when `getDisplayComponent` called with
    DisplayKind.Monthly
==== ScheduledEventDisplayComponent ====
* takes input, `kind` (?), to specify which display to...display
* basically an anchor for inserting requested display kind and delegating
    messages to update display or open details for an id
===== Tests =====
* [ ] intracom service provides id - id output emitted
* [ ] renders "List" when currentDisplayKind updated to List
* [ ] renders "Monthly" when currentDisplayKind updated to Monthly
* [ ] should call loadScheduledEvents in ngOnInit
    * [ ] written
    * [ ] passing
* [ ] should call getScheduledEventList service method in loadScheduledEvents
    * [ ] written
    * [ ] passing
==== ListComponent ====
* existing ListScheduledEventsComponent moved and renamed
===== Tests =====
====== Updates ======
* [ ] should call `getScheduledEventList` service method in ngOnInit
    * delete this test
* [ ] should call openDetails with correct id when "Details" clicked
    * rename "onOpenDetails" to "onIdSelected"
* [ ] should call `getScheduledEventList` service method when `updateSwitch` changed to true',
    * delete this test
* [ ] should emit `openDetailsEvent` with correct id when `openDetails` is called',
    * should call onIdSelected on intracom service in onIdSelected
====== New ======
* [ ] should destroy subscription to intracom in ngOnDestroy
    * [ ] written
    * [ ] passing
* [ ] should display scheduled events provided by intracom when passed through
    subject
    * [ ] written
    * [ ] passing
==== MonthlyCalendarComponent ====
* trivial component
===== Tests =====
* [ ] should create
    * [ ] written
    * [ ] passing
* [ ] should have message variable set to 'MonthlyCalendarComponent works!
    * [ ] written
    * [ ] passing
* [ ] should render message in an h1 tag
    * [ ] written
    * [ ] passing
== Integration ==
== Coat of Paint ==
= Additional Tasks =
* [[0013_MoveAddScheduledEventButton]]
* [[0014_MoveListScheduledEvents]]
* [[0015_ScheduledEventDisplayToggle]]
= To-Do =
* NOTE: the ScheduledEventsComponent tests import the full button toggle module
    * this isn't good practice, but I'm not sure writing an effective fake
        would be much better
    * I may just want to rethink how I test
    * figure this out; at least importing the module seems to work, even if
        it's not good practice (since bugs in that module would potentially
        produce failed tests here)
* have ScheduledEventsComponent dynamically load the requested display when
    the toggle button is changed
    * I think the info [[https://angular.io/guide/dynamic-component-loader|here]]
        will help
= Progress =
= Next =
* [X] create practice application with dynamically changing displays
    * already started
    * some research that I left off at, which may help:
        * https://angular.io/guide/attribute-directives
    * once this application is working, I should be able to apply the same
        functionality to TimeIn
    * Done! and working quite nicely.

