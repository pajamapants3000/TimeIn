%title Knowledge | TimeIn | Projects

    = Contents =
    - [[#The Problem with UWP|The Problem with UWP]]
    - [[#Web API Hosting|Web API Hosting]]
        - [[#Web API Hosting#Kestrel|Kestrel]]
        - [[#Web API Hosting#IIS|IIS]]
        - [[#Web API Hosting#Connecting IIS to SQL Server Database|Connecting IIS to SQL Server Database]]
        - [[#Web API Hosting#More on hosting|More on hosting]]
    - [[#SQL Server|SQL Server]]
        - [[#SQL Server#LocalDb|LocalDb]]
        - [[#SQL Server#Entity Framework and SQL Server|Entity Framework and SQL Server]]
    - [[#Customizing Services based on Configuration|Customizing Services based on Configuration]]
    - [[#Random Lessons|Random Lessons]]
        - [[#Random Lessons#No Form Tags on Components!|No Form Tags on Components!]]
        - [[#Random Lessons#Ng-Content for Directive Elements that Wrap Content|Ng-Content for Directive Elements that Wrap Content]]
    - [[#Working with JSON|Working with JSON]]
        - [[#Working with JSON#... and SQL Server|... and SQL Server]]
            - [[#Working with JSON#... and SQL Server#Multiple Tables|Multiple Tables]]
        - [[#Working with JSON#... and Angular/TypeScript|... and Angular/TypeScript]]
            - [[#Working with JSON#... and Angular/TypeScript#Multiple Tables|Multiple Tables]]
            - [[#Working with JSON#... and Angular/TypeScript#In-Memory Web API|In-Memory Web API]]
    - [[#Procedures|Procedures]]
        - [[#Procedures#Model Updates|Model Updates]]
    - [[#PATCH Requests|PATCH Requests]]
        - [[#PATCH Requests#Routing Control|Routing Control]]
    - [[#CORS|CORS]]
    - [[#TypeScript|TypeScript]]
        - [[#TypeScript#Dates and Times|Dates and Times]]
    - [[#Angular Testing|Angular Testing]]
        - [[#Angular Testing#fakeAsync|fakeAsync]]
        - [[#Angular Testing#ngModel|ngModel]]

= The Problem with UWP =
* Universal Windows applications cannot use consoles as UI
    * there is a new, experimental project template to allow this, but it
        requires writing the console app in C++
    * UWP applications will not work with .NET Core or .NET Framework
        * this is true not only as UWP libraries with core and framework console
            applications, but UWP applications (.exe) with .NET Core and
            .NET Framework libraries!
    * bottom line: Universal Windows is simply not compatible with these other
        frameworks in any way
    * Therefore, I don't think it's possible to write a console UI to use as
        a testing UI for UWP applications
    * what about an MVC or Web API application referencing a UWP library?
        * these are .NET Core/Framework! So.... NO :(
* I don't think UWP is an appropriate framework for this application
    * it seems better suited for simpler applications, focused on an attractive
        user experience more than a great deal of functionality and complexity
    * I will have to come up with another idea to practice UWP development
* ~~Moving forward, this is a WPF application~~
    * ~~this means targeting .NET Framework (I'll use 4.7.1)~~
    * ~~web front end will also have to use .NET Framework~~
    * unless I just want to do .NET core with a console app and web front end?
    * I _have_ been wanting to experiment with MVC and Angular...
    * plus, I already have a WPF application I want to write - The Library.
    * sold!
= Web API Hosting =
* The docs talk about in-process and out-of-process hosting
    * https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/?view=aspnetcore-2.2#application-configuration
    * I noticed this in my project file:
{{{xml
<Project Sdk="Microsoft.NET.Sdk.Web">

  <!-- ... -->

  <PropertyGroup>
    <TargetFramework>netcoreapp2.2</TargetFramework>
    <AspNetCoreHostingModel>InProcess</AspNetCoreHostingModel>
  </PropertyGroup>

  <!-- ... -->
</Project>
}}}
    * looks like the `AspNetCoreHostingModel` can specify which approach to use
* By default, a Web API assembly (.dll) will run on a built-in Kestrel server
* To start the server and the API, do one of the following:
    * `dotnet <path to dll>`
    * add site folder to IIS as an application
== Kestrel ==
* simply publish to a folder
* run `dotnet <path to dll>`
* recommend running from one directory up, so that you can easily stop the
    server and re-publish
    * otherwise the publish will fail when it tries to delete and re-create
        the directory (because you are working in it)
* by default, Kestrel runs on *http://localhost:5000*
* supposedly also runs on *https://localhost:5001*
    * haven't yet been able to get this to work
    * Solution: added latter url to *launchSettings.json* under "TimeIn" -
        "applicationUrl", semi-colon-separated alongside the former "http" url
* doesn't seem to be able to get connection strings from appsettings.json
    * at least, not the connection strings that IIS seems to have access to
    * for Kestrel, the only way I know that works is to pass a hardcoded
        connection string to the `UseSqlServer` method on `AddDbContext` when
        registering the services
== IIS ==
* set the host name in the desired bindings (e.g. *HostName*)
* set the ip address to 127.0.0.1
* create an identical binding for http and https, with ports 80 and 443
    (the defaults), respectively
* edit the system hosts file (*C:\Windows\System32\drivers\etc\hosts*)
    * add line e.g. "127.0.0.1   HostName"
* set the path of the site to the publish folder
    * the folder that visual studio copies the site files to when publishing
* create a *logs* folder in the project and make sure it is part of the
    build/publish output
    * in the csproj (or whatever project file) you should have:
{{{xml
<Project Sdk="Microsoft.NET.Sdk.Web">

  <!-- ... -->

  <ItemGroup>
    <Folder Include="logs\" />
  </ItemGroup>

  <!-- ... -->
</Project>
}}}
== Connecting IIS to SQL Server Database ==
* THANK YOU!  https://blogs.msdn.microsoft.com/ericparvin/2015/04/14/how-to-add-the-applicationpoolidentity-to-a-sql-server-login/
* Create login "IIS APPPOOL\AppPoolName"
    * you will _not_ find this in the search
    * in this case, I created a login with username "IIS APPPOOL\TimeIn"
* still working out the access details
    * I'd like to create a role for this, to access all site databases
    * for now, just added memberships to "db_datareader" and "db_datawriter"
== More on hosting ==
* There is a lot involved in web hosting and there is so much to learn
* Not really my area, so hopefully I won't need much more than these basics
= SQL Server =
* Visual Studio has a built-in copy of SQL Server - LocalDB
* To continue using SQL Server after publishing (i.e. running outside of
    Visual Studio), make sure to have SQL Server installed
* SQL Server Browser service needs to be running in order to see instance in
    dialogs such as add new data source
* SQL Server Agent service needs to be running to perform actions such as copy
    database
* On copying database in SSMS:
    * Copy always seems to fail; can't figure out why
    * general recommendation seems to simply be "don't do that"
        * https://stackoverflow.com/questions/28007992/the-job-failed-in-copying-database-sql-server-2012
    * use backup and restore instead, at least for making a local copy
== LocalDb ==
* not meant to work with IIS
* can use when developing, testing, and debugging from Visual Studio
* may also be ok when simply running a Kestrel server
* Note: mdf file and log file are automatically created in (root of) user folder
    * automatically, that is, by EF
    * this is not accessible to an IIS site
== Entity Framework and SQL Server ==
* most of the tutorials use LocalDb, so I wasn't sure how to proceed once I was
    ready to publish
* As it happens, simply changing the connection string from:
    * "Server=(localdb)\\mssqllocaldb;Database=TimeIn.Dev_01;Trusted_Connection=True;ConnectRetryCount=0;"
    to:
    * "Server=LILU-WINDXPRO;Database=TimeIn.Dev_01;Trusted_Connection=True;ConnectRetryCount=0;Integrated Security=SSPI;"
    and, subsequently running `Update-Database` in the Package Manager Explorer
    created the new database in SQL Server, which I could see in SSMS after
    refreshing the Databases list!
= Customizing Services based on Configuration =
* https://andrewlock.net/configuring-environment-specific-services-in-asp-net-core/
* this enabled me to use a test database in development, but have a separate
    database for production
* I found another interesting approach [[https://docs.microsoft.com/en-us/aspnet/core/fundamentals/environments?view=aspnetcore-2.2#environment-based-startup-class-and-methods|here]]
* you can set environment variables per app pool
    * https://docs.microsoft.com/en-us/iis/configuration/system.applicationHost/applicationPools/add/environmentVariables/#appcmdexe
= Random Lessons =
== No Form Tags on Components! ==
* Don't wrap a component template in <form> (idiot)
    * I spent so much time trying to understand why testing was running in an
        infinite loop as soon as I called a click event
    * I realized how stupid it is to wrap a component in a <form> tag! Of
        course, after I spent a _LOT_ of time troubleshooting
        * *sigh*
* I think it's ok in the root component (e.g. AppComponent)
== Ng-Content for Directive Elements that Wrap Content ==
* When testing against pages with angular components that have content inside
    them, create a stub with template="<ng-content></ng-content>"
    * e.g. a page like:
{{{html
<div>
    <mat-form-field class="reminder-input">
        <input matInput type="text" #newReminder placeholder="Add new reminder" />
    </mat-form-field>
</div>
}}}
    * in the test, need to create the following:
{{{ts
@Component({selector: 'mat-form-field', template: '<ng-content></ng-content>'})
class MatFormFieldStub {
}
}}}
    * add this stub to the `TestBed.configureTestingModule` `declarations`
        metadata property
= Working with JSON =
== ... and SQL Server ==
* read data from json file and convert to table:
{{{sql
SELECT id, value
    FROM OPENROWSET (BULK 'G:\GoogleDrive-otripleg\Workspace\TimeIn\testData.json', SINGLE_CLOB) as j
CROSS APPLY OPENJSON(BulkColumn)
    WITH (
        id int,
        value varchar(100)
    )
}}}
* I've confirmed that this works great!
    * however, I don't understand much of it (yet)
* reset test data:
{{{sql
SET IDENTITY_INSERT [Reminder] ON;
INSERT [Reminder] (id, value)
    SELECT id, value FROM OPENROWSET (BULK 'G:\GoogleDrive-otripleg\Workspace\TimeIn\testData.json', SINGLE_CLOB) as j
    CROSS APPLY OPENJSON(BulkColumn)
        WITH
        (
            id int,
            value varchar(100)
        )
SET IDENTITY_INSERT [Reminder] OFF;
}}}
* NOTE: you could just copy the tables without specifying the column, but since
    we are including the identity column, SQL Server requires the columns to
    be explicit
* columns must be specified for both tables (from and to)
=== Multiple Tables ===
* this was a b-and-a-half, but I got it!
* JSON:
{{{json
{
        "Reminder": [
            {
                "id": 1,
                "value": "Reminder One"
            },
            {
                "id": 2,
                "value": "Reminder Two"
            },
            {
                "id": 3,
                "value": "Reminder Three"
            },
            {
                "id": 4,
                "value": "Reminder Four"
            }
        ],
    "OtherTable": [
        {
            "id": 1,
            "value1": "testOne",
            "value2": "testTwo"
        },
        {
            "id": 3,
            "value1": "testThree",
            "value2": "testFour"
        },
        {
            "id": 5,
            "value1": "testFive",
            "value2": "testSix"
        }
    ]
}
}}}
* sql:
{{{sql
SET IDENTITY_INSERT [Reminder] ON;
INSERT [Reminder] (id, value)
    SELECT id, value FROM OPENROWSET (BULK 'G:\GoogleDrive-otripleg\Workspace\TimeIn\testData.json', SINGLE_CLOB) as j
    CROSS APPLY OPENJSON(BulkColumn, '$."Reminder"')
        WITH
        (
            id int,
            value varchar(100)
        )
SET IDENTITY_INSERT [Reminder] OFF;
}}}
* for the other table, we'd do:
{{{sql
SET IDENTITY_INSERT [OtherTable] ON;
INSERT [Reminder] (id, value)
    SELECT id, value FROM OPENROWSET (BULK 'G:\GoogleDrive-otripleg\Workspace\TimeIn\testData.json', SINGLE_CLOB) as j
    CROSS APPLY OPENJSON(BulkColumn, '$."OtherTable"')
        WITH
        (
            id int,
            value1 varchar(100),
            value2 varchar(100)
        )
SET IDENTITY_INSERT [Reminder] OFF;
}}}

== ... and Angular/TypeScript ==
* here is what I used:
{{{ts
import * as json from '../../../testData.json';

let testData: Reminder[] = json.map(i => {
    return { id: i.id, value: i.value }
});
let testData_empty: Reminder[] = [];
}}}
* this replaced the REMINDERS and REMINDERS_EMPTY test data objects
* JSON can have the following data types:
    * strings
    * numbers
    * objects
    * arrays
    * Booleans (true or false)
    * null
* therefore, we shouldn't ever need to do any conversion to TypeScript types
* however, the explicit mapping of items to objects as seen here, even though
    the properties are the same and of the same type, is required
* one thing I did learn (when I thought JSON _had_ to be strings:
    * you can prefix a string with a unary `+` to parse it as a number
* These changes will be seen as a problem by the TypeScript LanguageServer
    parser
    * it will think you can't import the json file
    * it still works, but the parser says there's a problem
    * to get around this, add the following line to the tsconfig.json, in the
        `compilerOptions` section:
        * "resolveJsonModule": true
    * now the parser accepts the json file as importable
=== Multiple Tables ===
* much easier than it was in SQL!
{{{ts
let testData: Reminder[] = json.Reminder.map(i => {
  return { id: i.id, value: i.value }
});
}}}
* note: we just reference the table as a property of the json object - simple!
* the LanguageServer even picks up on the json object's properties - amazing!
=== In-Memory Web API ===
* running `ng test` I was getting frustrated and confused because the data was
    old data, despite the tests recompiling and rerunning many times
    * turns out that if the data source is changed (or possibly just a JSON
        data source), you must exit `ng test` entirely and restart it to get
        the updated data in the in-memory web api
= Procedures =
== Model Updates ==
e.g. to add a new column:
* add to model in ClientUi (frontend)
* add to model in API (backend)
* API: `Add-Migration <Table><Column>`, then `Update-Database`
* make sure all alternate databases are updated manually:
    * `ALTER TABLE <table> ADD <column> <type> [[NOT] [NULL]] [DEFAULT <default value>];`
* add column to test data (e.g. testData.json)
* add column to test data reset script
Summary:
* update frontend model
* update backend model
* update migrations and any connected databases
* update test data
* update scripts
= PATCH Requests =
* create separate patch model class
    * separate file, or include in model class file (or dbContext file)?
    * same as model file, except:
        * no `id` property
        * all value types in the model are included as nullable types
        * all reference types in the model are included
== Routing Control ==
* with attribute routing (which I am currently using and seems to be the common
    way nowadays), you set the root path of the URL in the `Route` attribute
    of the controller
    * e.g. `[Route("api/[controller]")]` in the `ValuesController` will
        process requests sent to e.g. localhost/api/values
        * currently, I am working without the "api" previx
            * that is, `[Route("[controller]")]`
* to append additional route segments for an action, apply it as an argument to
    the action attribute:
    * `[HttpPatch("{id}")]`
* this can include any constraints
* great info for ASP.NET Core 2.2:
    * https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing?view=aspnetcore-2.2
= CORS =
* For some reason, `AllowAnyMethod` is needed to use PATCH
    * it worked without it for GET and POST (confirmed)
    * lik
* or, of course, explicitly setting the allowed methods (which I haven't gotten
    into yet, but will need to at some point)
= TypeScript =
== Dates and Times ==
* use the `Date` data type for datetimes
* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date
* when using 'datetime-local' input, do _not_ include any time zone information
    * e.g. the `Z` suffix - leave it out!
= Angular Testing =
== fakeAsync ==
* doesn't seem to go through for-loops, just skips over
== ngModel ==
* testing two-way binding requires using `fakeAsync` with `detectChanges` and
    `tick`
* putting `detectChanges` in the `beforeEach` breaks it!
* somehow this prevents the two-way binding on ngModel from working - sheesh!

